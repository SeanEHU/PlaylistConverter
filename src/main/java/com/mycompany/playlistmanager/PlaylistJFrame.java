/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.playlistmanager;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author seand
 */
public class PlaylistJFrame extends javax.swing.JFrame {


    private static String[] playlistTblHeads = {"Title", "Artist", "Album", "Track Number", "Length"};
    private DefaultTableModel tblMdlPlaylist = new DefaultTableModel(playlistTblHeads, 0);
    private Playlist currentPlaylist;
    private File currentPlaylistFile;
    private FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("CSV file", "csv");


    /**
     * Creates new form PlaylistJFrame
     */
    public PlaylistJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panPlaylist = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlaylist = new javax.swing.JTable();
        lblPlaylistName = new javax.swing.JLabel();
        panConvert = new javax.swing.JPanel();
        cmbConvert = new javax.swing.JComboBox<>();
        btnConvert = new javax.swing.JButton();
        progConvert = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuINew = new javax.swing.JMenuItem();
        menuIOpen = new javax.swing.JMenuItem();
        menuISave = new javax.swing.JMenuItem();
        menuISaveAs = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        menuIAddSong = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tblPlaylist.setModel(this.tblMdlPlaylist);
        jScrollPane1.setViewportView(tblPlaylist);

        lblPlaylistName.setText(". . .");

        javax.swing.GroupLayout panPlaylistLayout = new javax.swing.GroupLayout(panPlaylist);
        panPlaylist.setLayout(panPlaylistLayout);
        panPlaylistLayout.setHorizontalGroup(
            panPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPlaylistLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panPlaylistLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPlaylistName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panPlaylistLayout.setVerticalGroup(
            panPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panPlaylistLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(lblPlaylistName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 10.0;
        getContentPane().add(panPlaylist, gridBagConstraints);

        panConvert.setLayout(new java.awt.GridBagLayout());

        cmbConvert.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbConvert.setActionCommand("cmbConvert");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panConvert.add(cmbConvert, gridBagConstraints);

        btnConvert.setText("Convert to");
        btnConvert.setActionCommand("btnConvert");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panConvert.add(btnConvert, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panConvert.add(progConvert, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weighty = 2.0;
        getContentPane().add(panConvert, gridBagConstraints);

        fileMenu.setText("File");

        menuINew.setText("New Playlist");
        menuINew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuINewActionPerformed(evt);
            }
        });
        fileMenu.add(menuINew);

        menuIOpen.setText("Open");
        menuIOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuIOpenActionPerformed(evt);
            }
        });
        fileMenu.add(menuIOpen);

        menuISave.setText("Save");
        menuISave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuISaveActionPerformed(evt);
            }
        });
        fileMenu.add(menuISave);

        menuISaveAs.setText("Save As");
        menuISaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuISaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(menuISaveAs);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        menuIAddSong.setText("Add Song");
        menuIAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuIAddSongActionPerformed(evt);
            }
        });
        editMenu.add(menuIAddSong);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuINewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuINewActionPerformed
        
        String nameIn = JOptionPane.showInputDialog(null, "Enter playlist name: ");

        this.displayNewPlaylist(new Playlist(nameIn));
        
        
    }//GEN-LAST:event_menuINewActionPerformed

    private void menuIAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIAddSongActionPerformed

        this.addSong();
    }                                            
    
    private void menuISaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuISaveActionPerformed
        this.savePlaylist(currentPlaylistFile);
    }//GEN-LAST:event_menuISaveActionPerformed

    private void menuISaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuISaveAsActionPerformed
        this.savePlaylistAs();
    }//GEN-LAST:event_menuISaveAsActionPerformed

    private void menuIOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIOpenActionPerformed
        this.openPlaylist();
    }//GEN-LAST:event_menuIOpenActionPerformed



    private void displayNewPlaylist(Playlist nPlaylist){

        this.currentPlaylist = nPlaylist;
        lblPlaylistName.setText(nPlaylist.getName());

        this.updateTable();

    }

    private void addSong(){

        String nTitle = null;
        String nArtist = null;
        String nAlbum = null;
        int nTrack = -1;
        int nLength = -1;
        boolean success = true;
        boolean cancel = false;

        JTextField textTitle = new JTextField();
        JTextField textArtist = new JTextField();
        JTextField textAlbum = new JTextField();
        JTextField textTrack = new JTextField();
        JTextField textLengthMin = new JTextField();
        JTextField textLengthSec = new JTextField();

        Object[] fields = {
            "Title", textTitle,
            "Artist", textArtist,
            "Album", textAlbum,
            "Track", textTrack,
            "Length", new Object[] {
                "Minutes", textLengthMin,
                "Seconds", textLengthSec
            }
        };

        do{
            int n = JOptionPane.showConfirmDialog(null, fields, "New Song", JOptionPane.OK_CANCEL_OPTION);

            if (n == JOptionPane.OK_OPTION) {
                if (textTitle.getText().equals("") || textArtist.getText().equals("")) {

                    JOptionPane.showMessageDialog(null, "Please input a Title and Artist", "error", JOptionPane.WARNING_MESSAGE);
                    success = false;

                }  
                else{
                    nTitle = textTitle.getText();
                    nArtist = textArtist.getText();
                    
                    if (!textAlbum.getText().equals("")){
                        nAlbum = textAlbum.getText();
                    }


                    if (!textTrack.getText().equals("")){
                        try{
                            nTrack = Integer.parseInt(textTrack.getText());
                        }
                        catch(Exception e){
                            success = false;
                            JOptionPane.showMessageDialog(null, "Please enter a valid input for 'Track Number'", "error", JOptionPane.WARNING_MESSAGE);
                        }
                    }

                    if (!textLengthSec.getText().equals("") || !textLengthMin.getText().equals("")) {

                        nLength = 0;

                        if (!textLengthMin.getText().equals("")){
                            try{
                                nLength += 60*Integer.parseInt(textLengthMin.getText());
                            }
                            catch(Exception e){
                                success = false;
                                JOptionPane.showMessageDialog(null, "Please enter a valid input for 'Minutes'", "error", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                        if (!textLengthSec.getText().equals("")){
                            try{
                                nLength += Integer.parseInt(textLengthSec.getText());
                            }
                            catch(Exception e){
                                success = false;
                                JOptionPane.showMessageDialog(null, "Please enter a valid input for 'Seconds'", "error", JOptionPane.WARNING_MESSAGE);
                            }
                        }

                    }
                }
            }
            else {
                cancel = true;
            }
        }while (success == false && cancel == false);

        if (this.currentPlaylist.addSong(new Song(nTitle,nArtist,nAlbum,nTrack,nLength))) {
            JOptionPane.showMessageDialog(null, "A new song has been added to the playlist", "Sucess", JOptionPane.INFORMATION_MESSAGE);
            this.updateTable();
        }
        else {
            JOptionPane.showMessageDialog(null, "Unable to add song to the playlist", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuIAddSongActionPerformed

    public void updateTable(){

        Vector<Song> nSongData = this.currentPlaylist.getSongList();
        Song currentSong;
        String currentLength;

        DefaultTableModel nPlaylistData = new DefaultTableModel(playlistTblHeads, 0);

        for (int i = 0; i < nSongData.size(); i++){
            
            currentSong = nSongData.get(i);
            currentLength = Integer.toString(currentSong.getLength()/60) + ":" + Integer.toString(currentSong.getLength()%60);
            nPlaylistData.addRow(new String[] {currentSong.getTitle(), currentSong.getArtist(), currentSong.getAlbum(), Integer.toString(currentSong.getTrackNum()), currentLength});
        }

        this.tblPlaylist.setModel(nPlaylistData);

    }
    
    public void savePlaylistAs(){
        
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(this.fileFilter);
        fc.addChoosableFileFilter(this.fileFilter);
        fc.setSelectedFile(new File(currentPlaylist.getName()));
        fc.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY);

        int n = fc.showSaveDialog(null);

        if (n == JFileChooser.APPROVE_OPTION) {
            
            File savedPlaylist = fc.getSelectedFile();

            try{

                if (savedPlaylist.createNewFile()) {
                    
                    savePlaylist(savedPlaylist);

                } 
                else {
                    JOptionPane.showMessageDialog(null,"File already exists.");
                }
            } 
            catch (IOException e) {
                JOptionPane.showMessageDialog(null,"Error creating new playlist file.");
                e.printStackTrace();
    
            }

        } 


    }

    public void savePlaylist(File playlistFile){

        try{
            FileWriter playlistWriter = new FileWriter(playlistFile);
            playlistWriter.write(currentPlaylist.getName()+",\n");

            StringBuilder songData = new StringBuilder();

            for (int i = 0; i < currentPlaylist.getSongList().size(); i++){

                songData.append(currentPlaylist.getSongList().get(i).getTitle());
                songData.append(',');
                songData.append(currentPlaylist.getSongList().get(i).getArtist());
                songData.append(',');
                songData.append(currentPlaylist.getSongList().get(i).getAlbum());
                songData.append(',');
                songData.append(currentPlaylist.getSongList().get(i).getTrackNum());
                songData.append(',');
                songData.append(currentPlaylist.getSongList().get(i).getLength());
                songData.append(',');
                songData.append("\n");

            }

            playlistWriter.write(songData.toString());
        
            playlistWriter.close();
        }
        catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    public void openPlaylist(){

        String nName = "";
        Vector<Song> nSongList;
        String line;
        ArrayList<String> lineList = new ArrayList<>();
        

        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(this.fileFilter);
        fc.addChoosableFileFilter(this.fileFilter);

        int n = fc.showOpenDialog(this);

        if (n == JFileChooser.APPROVE_OPTION) {
            
            File playlistFile =  fc.getSelectedFile();

            try{

                BufferedReader playlistReader = new BufferedReader(new FileReader(playlistFile));

                line = playlistReader.readLine().replaceAll(",", "");
                nName = line;
                
                while (line != null) {

                    line = playlistReader.readLine();
                    lineList.add(line);

                }

                playlistReader.close();
    
            }
            catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }

            this.currentPlaylistFile = playlistFile;

            nSongList = this.threadedPlaylistMaker(lineList);

            this.displayNewPlaylist(new Playlist(nName, nSongList));

        }

    }

    private Vector<Song> threadedPlaylistMaker(ArrayList<String> songDataArrayList){

        Vector<Song> buildingSongList = new Vector<>(0);

        Thread songThread1;
        Thread songThread2;
        Thread songThread3;
        Thread songThread4;
        Thread songThread5;

        SongReadTask songTask1;
        SongReadTask songTask2;
        SongReadTask songTask3;
        SongReadTask songTask4;
        SongReadTask songTask5;

        BlockingQueue<String> lineQueue = new LinkedBlockingQueue<>(Integer.MAX_VALUE); //unbound queue
        for (int i = 0; i <= songDataArrayList.size()-2; ++i){
            lineQueue.add(songDataArrayList.get(i));
        }

        while (lineQueue.size() > 0) {


            if (lineQueue.size() >= 5){

                songTask1 =new SongReadTask(lineQueue.poll()); songThread1 = new Thread(songTask1); 
                songThread1.start();
                songTask2 =new SongReadTask(lineQueue.poll()); songThread2 = new Thread(songTask2); 
                songThread2.start();
                songTask3 =new SongReadTask(lineQueue.poll()); songThread3 = new Thread(songTask3); 
                songThread3.start();
                songTask4 =new SongReadTask(lineQueue.poll()); songThread4 = new Thread(songTask4); 
                songThread4.start();
                songTask5 =new SongReadTask(lineQueue.poll()); songThread5 = new Thread(songTask5); 
                songThread5.start();
                
                try {
                songThread1.join(); buildingSongList.addElement(songTask1.getSong());
                songThread2.join(); buildingSongList.addElement(songTask2.getSong());
                songThread3.join(); buildingSongList.addElement(songTask3.getSong());
                songThread4.join(); buildingSongList.addElement(songTask4.getSong());
                songThread5.join(); buildingSongList.addElement(songTask5.getSong());

                }
                catch (InterruptedException e){

                    e.printStackTrace();

                }
                
            }
            else{
                    
                songTask1 =new SongReadTask(lineQueue.poll()); songThread1 = new Thread(songTask1); 
                songThread1.start();

                try {

                        songThread1.join(); buildingSongList.add(songTask1.getSong());

                    }
                catch (InterruptedException e){

                        e.printStackTrace();

                }

            }

        }

        return buildingSongList;

    }



    /**
     * @param args the command songData arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlaylistJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaylistJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlaylistJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlaylistJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlaylistJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvert;
    private javax.swing.JComboBox<String> cmbConvert;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPlaylistName;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuIAddSong;
    private javax.swing.JMenuItem menuINew;
    private javax.swing.JMenuItem menuIOpen;
    private javax.swing.JMenuItem menuISave;
    private javax.swing.JMenuItem menuISaveAs;
    private javax.swing.JPanel panConvert;
    private javax.swing.JPanel panPlaylist;
    private javax.swing.JProgressBar progConvert;
    private javax.swing.JTable tblPlaylist;
    // End of variables declaration//GEN-END:variables
}
